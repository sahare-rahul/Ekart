
pipeline {
    agent any

    tools {                   #  here  in tools we add tools which we need in this pipeline.
        maven 'maven3'
        jdk 'jdk17'
    }

    environment {             # here we add enviroment section which use for defining variables which we can used in all stages in pipeline.
        SCANNER_HOME = tool 'sonar-scanner'   # and add sonarqube scanner tool as a veriable.
    }

    stages {
        stage('Git Checkout') {   # here we are clonnig code from git-hub to workspace and genrating this code by using "git: GIT"  in syntax genratar.
            steps {
                git branch: 'main', url: 'https://github.com/jaiswaladi246/Ekart.git'
            }
        }

        stage('Compile') {    #here we compiling code meaning converting code into machine level language from human level.
            steps {
                sh "mvn compile"
            }
        }

        stage('Unit Tests') {  # here we testing code of compiling but using "-DskipTest=true" we skiping this step bcoz test case not wrriten for this code. 
            steps {
                sh "mvn test -DskipTests=true"
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar') {  # here we are adding soanrqube authentication and used "withSonarqubeEnv: prepare sonarqube scanner envirment" and 
                    sh '''                       "sonar"  ID we created for authentication
                        $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectKey=EKART -Dsonar.projectName=EKART \
                        -Dsonar.java.binaries=.
                    '''
                }
            }
        }

        stage('OWASP Dependency Check') {  # here we checking os dependecy check 1st we used "dependecy check: invoke dependency" for grnrating 1st syntax
            steps {
                dependencyCheck additionalArguments: ' --scan ./', odcInstallation: 'DC'  #and here usiing --scan ./ argument to scan pom.xml file urrent dir ./ and DC is we congigure tools in jenkins
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'     # here using dependency check publisher syntax genrator and provinding 
            }                                                                            **/dependecy-check-report.xml to genrate report in this format.
        }

        stage('Build') {
            steps {
                sh "mvn package -DskipTests=true"   # here we pachaging code and genrating artifact but we skipping test case bcoz we dont have test code for application.
            }
        }

        stage('Deploy To Nexus') {  # here we are pushhing created artifact on artifact server nexus. so we downlode plugging "pipeline maven intigration plugin" 
            steps {                  # from that pluging we see option in syntax genrator "with maven provider maven env" and genrated following syntax which connect with nexus server.
                withMaven(globalMavenSettingsConfig: 'global-maven', jdk: 'jdk17', maven: 'maven3', mavenSettingsConfig: '', traceability: true) {
                    sh "mvn deploy -DskipTests=true"    #and here runnug mvn deploy command for deploying created artifact on nenux.
                }
            }
        }

        stage('Docker Build & tag Image') {  # here we are using "WithDockerregistr: setup docker registry endoint" syntax genrator for logging with docker and grnrated following syntax,
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') { 
                        sh "docker build -t adijaiswal/ekart:latest -f docker/Dockerfile ."   #-1here we are building docker images and giving tag but docker file 
                    }                                                                           is not pesent in current dir so for that we -f docker/Docker .
                }                                                                                in docker folder Dockerfile are pesent . meam current dir EKART.
            }                                                                                   # or we used "dir:change current dir" syntxax genrater and paste current 
        }                                                                                         workspace of job and paste our current docker file path "var/lib/jenkins/workspace/jobname/docker/dockerfile"

        stage('Trivy Scan') {
            steps {
                sh "trivy image adijaiswal/ekart:latest > trivy-report.txt "   # using trivy image commad trivy scanning created images and storing report in 
            }                                                                     trivy-report.txt this file we can give any name.                           
        }

        stage('Docker Push Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {  #this is login credential for docker-hub 
                        sh "docker push adijaiswal/ekart:latest"            # using this commad we pusshing created images on docke-hub
                    }
                }
            }
        }

        stage('Kubernetes Deploy') {  #here we downlode kubernetes and kunerneets cli plugins. and used "with kubeconfig: congigure kubernets cli" for genrating following 
            steps {                   # syntax for connect jenkins with kubernets to do deployment on kubernets by using service accout token. 
                withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'k8-token', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://172.31.8.162:6443') {
                    sh "kubectl apply -f deploymentservice.yml -n webapps"
                    sh "kubectl get svc -n webapps"                         #and here we run commads
                }
            }
        }
    }
}


##### USED plugging in pipeline###
1. sonarqube scanne 2. nexus artifactuploder. 3. docker 4. docker pipeline 5. docker build steps. 6. owasp dependency check 7. Eclips temurin installer for java.
8.config file provider for manage nexus credentials 9. kubernetes and kebernets cli. 10.


    ####VEDIOS LINK https://youtu.be/yH9RoOFEKMY?si=1soNqK2mPdvlnvG4
